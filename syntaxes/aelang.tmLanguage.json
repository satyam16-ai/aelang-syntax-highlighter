{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ã†Lang",
  "scopeName": "source.aelang",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#constants"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.aelang",
          "begin": "//",
          "end": "$",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aelang"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.aelang",
          "match": "\\b(if|else|while|for|return|break|continue)\\b"
        },
        {
          "name": "keyword.declaration.aelang",
          "match": "\\b(let|func|extern)\\b"
        },
        {
          "name": "keyword.other.aelang",
          "match": "\\b(void)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.primitive.integer.aelang",
          "match": "\\b(i8|i16|i32|i64|u8|u16|u32|u64)\\b"
        },
        {
          "name": "entity.name.type.primitive.float.aelang",
          "match": "\\b(f8|f16|f32|f64)\\b"
        },
        {
          "name": "entity.name.type.primitive.special.aelang",
          "match": "\\b(num|bool|char|str|void)\\b"
        }
      ]
    },
    "constants": {
      "patterns": [
        {
          "name": "constant.language.boolean.aelang",
          "match": "\\b(true|false)\\b"
        },
        {
          "name": "constant.language.null.aelang",
          "match": "\\b(null)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.aelang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.aelang",
              "match": "\\\\."
            },
            {
              "name": "constant.other.placeholder.format.aelang",
              "match": "%[dufltc]|%l[du]"
            }
          ]
        },
        {
          "name": "string.quoted.single.aelang",
          "begin": "'",
          "end": "'",
          "patterns": [
            {
              "name": "constant.character.escape.aelang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.aelang",
          "match": "\\b\\d+\\.\\d+([eE][+-]?\\d+)?[fF]?\\b"
        },
        {
          "name": "constant.numeric.integer.hex.aelang",
          "match": "\\b0[xX][0-9a-fA-F]+\\b"
        },
        {
          "name": "constant.numeric.integer.binary.aelang",
          "match": "\\b0[bB][01]+\\b"
        },
        {
          "name": "constant.numeric.integer.octal.aelang",
          "match": "\\b0[oO][0-7]+\\b"
        },
        {
          "name": "constant.numeric.integer.decimal.aelang",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.aelang",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.aelang",
          "match": "(\\+|\\-|\\*|\\/|%)"
        },
        {
          "name": "keyword.operator.assignment.aelang",
          "match": "="
        },
        {
          "name": "keyword.operator.logical.aelang",
          "match": "(&&|\\|\\||!)"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.builtin.io.aelang",
          "match": "\\b(print|read)\\b"
        },
        {
          "name": "entity.name.function.builtin.legacy.aelang",
          "match": "\\b(print_int|print_float|print_str|print_bool|print_num|print_clean|read_int|read_float|read_num|read_bool|read_char)\\b"
        },
        {
          "name": "entity.name.function.aelang",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.aelang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}