{
  "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
  "name": "Ã†Lang",
  "scopeName": "source.aelang",
  "patterns": [
    {
      "include": "#comments"
    },
    {
      "include": "#keywords"
    },
    {
      "include": "#types"
    },
    {
      "include": "#strings"
    },
    {
      "include": "#numbers"
    },
    {
      "include": "#operators"
    },
    {
      "include": "#functions"
    },
    {
      "include": "#identifiers"
    }
  ],
  "repository": {
    "comments": {
      "patterns": [
        {
          "name": "comment.line.double-slash.aelang",
          "begin": "//",
          "end": "$",
          "captures": {
            "0": {
              "name": "punctuation.definition.comment.aelang"
            }
          }
        }
      ]
    },
    "keywords": {
      "patterns": [
        {
          "name": "keyword.control.aelang",
          "match": "\\b(if|else|while|for|return|break|continue)\\b"
        },
        {
          "name": "keyword.declaration.aelang",
          "match": "\\b(let|func|extern)\\b"
        },
        {
          "name": "keyword.other.aelang",
          "match": "\\b(void)\\b"
        }
      ]
    },
    "types": {
      "patterns": [
        {
          "name": "entity.name.type.primitive.aelang",
          "match": "\\b(i32|f32|bool|str)\\b"
        }
      ]
    },
    "strings": {
      "patterns": [
        {
          "name": "string.quoted.double.aelang",
          "begin": "\"",
          "end": "\"",
          "patterns": [
            {
              "name": "constant.character.escape.aelang",
              "match": "\\\\."
            }
          ]
        }
      ]
    },
    "numbers": {
      "patterns": [
        {
          "name": "constant.numeric.float.aelang",
          "match": "\\b\\d+\\.\\d+\\b"
        },
        {
          "name": "constant.numeric.integer.aelang",
          "match": "\\b\\d+\\b"
        }
      ]
    },
    "operators": {
      "patterns": [
        {
          "name": "keyword.operator.comparison.aelang",
          "match": "(==|!=|<=|>=|<|>)"
        },
        {
          "name": "keyword.operator.arithmetic.aelang",
          "match": "(\\+|\\-|\\*|\\/|%)"
        },
        {
          "name": "keyword.operator.assignment.aelang",
          "match": "="
        },
        {
          "name": "keyword.operator.logical.aelang",
          "match": "(&&|\\|\\||!)"
        }
      ]
    },
    "functions": {
      "patterns": [
        {
          "name": "entity.name.function.builtin.aelang",
          "match": "\\b(print|print_int|print_float|read_int|read_float)\\b"
        },
        {
          "name": "entity.name.function.aelang",
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\s*(?=\\()"
        }
      ]
    },
    "identifiers": {
      "patterns": [
        {
          "name": "variable.other.aelang",
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b"
        }
      ]
    }
  }
}